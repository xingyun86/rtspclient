# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = gtest-1.7.0

# Where to find user code.
USER_DIR = ../myRtspClient

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = myTest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

SRCS :=
OBJS :=
LIBS :=
INCLUDE_DIR :=


SRCS += $(wildcard *.cpp)
OBJS += $(patsubst %.cpp,%.o, $(SRCS))

# USER_MAIN_OBJ	:= myRtsp.o
USER_OBJ_DIR 	:= $(USER_DIR)

LIBS += -lpthread
LIBS += gtest_main.a
LIBS += $(USER_DIR)/libmyRtspClient.a

INCLUDE_DIR += -I$(USER_DIR)/include

# ORSRCS := $(patsubst $(EXCLUDE_MAIN),, $(SRCS))

THIRD_PATRY := ../third_party
BASE64_DIR = -I$(THIRD_PATRY)/Base64_live555/include
MD5_DIR = -I$(THIRD_PATRY)/md5/include
CXXFLAGS += $(BASE64_DIR) $(MD5_DIR)
# 
# JRTP := $(THIRD_PATRY)/jrtplib-3.9.1/build
# 
# JRTP_LIB =
# JRTP_LIB += $(JRTP)/src/libjrtp.a
# 
# JRTP_INCLUDE =
# JRTP_INCLUDE += -I$(JRTP)/src
# JRTP_INCLUDE += -I$(JRTP)/../src
# 
# INCLUDE_DIR += $(JRTP_INCLUDE)
# LIBS += $(THIRD_PATRY)/md5/libmd5.a


CXXFLAGS += $(INCLUDE_DIR)

$(TESTS): $(OBJS) gtest_main.a
	# (cd ..; make;)
	# rm -f $(USER_OBJ_DIR)/$(USER_MAIN_OBJ)
	$(CXX) $(CXXFLAGS) -o $(TESTS) $(USER_OBJ_DIR)/*.o $(OBJS) $(LIBS) 

sinclude .depend

.depend: $(SRCS)
	@$(CXX) $(CXXFLAGS) -MM $(SRCS) > $@  		

clean :
	# (cd ..; make clean;)
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

# gtest_main.o : $(GTEST_SRCS_)
# 	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
#             $(GTEST_DIR)/src/gtest_main.cc
my_gtest_main.o : $(GTEST_SRCS_) my_gtest_main.cc
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            ./my_gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o my_gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

# sample1.o : $(USER_DIR)/sample1.cc $(USER_DIR)/sample1.h $(GTEST_HEADERS)
# 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1.cc
# 
# sample1_unittest.o : $(USER_DIR)/sample1_unittest.cc \
#                      $(USER_DIR)/sample1.h $(GTEST_HEADERS)
# 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1_unittest.cc
# 
# sample1_unittest : sample1.o sample1_unittest.o gtest_main.a
# 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
